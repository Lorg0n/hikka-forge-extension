import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
  DialogClose,
} from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Loader2, Search, SearchX, Film, Sparkles } from 'lucide-react';
import { Skeleton } from '@/components/ui/skeleton';
import { useAnimeSearch } from '@/hooks/useAnimeSearch';
import SimilarAnimeCard from '@/components/ui/anime/similar-anime-card';
import { Icon } from '@iconify/react/dist/iconify.js';
import { SimilarAnimeItem } from '@/types';

const SearchResults = ({
  loading,
  results,
}: {
  loading: boolean;
  results: SimilarAnimeItem[] | null;
}) => {
  const CenteredPlaceholder = ({ children }: { children: React.ReactNode }) => (
    <div className="flex h-full flex-col items-center justify-center text-center py-12 px-4">
      {children}
    </div>
  );

  if (!loading && !results) {
    return (
      <CenteredPlaceholder>
        <div className="relative mb-6">
          <Film className="h-16 w-16 text-muted-foreground/40 mx-auto" />
          <Sparkles className="h-5 w-5 text-primary absolute -top-1 -right-1 animate-pulse" />
        </div>
        <h3 className="text-lg font-semibold text-foreground mb-2">–í—ñ–¥–∫—Ä–∏–π—Ç–µ —Å–≤–æ—î –Ω–∞—Å—Ç—É–ø–Ω–µ –∞–Ω—ñ–º–µ</h3>
        <p className="text-muted-foreground text-sm max-w-sm mb-4">
          –û–ø–∏—à—ñ—Ç—å –±—É–¥—å-—è–∫—É –∫–æ–Ω—Ü–µ–ø—Ü—ñ—é, —Å—é–∂–µ—Ç –∞–±–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∞–Ω—ñ–º–µ, —ñ –º–∏ –∑–Ω–∞–π–¥–µ–º–æ —Å—Ö–æ–∂—ñ —à–æ—É, —è–∫—ñ –≤–∞–º —Å–ø–æ–¥–æ–±–∞—é—Ç—å—Å—è.
        </p>
        <div className="text-xs text-muted-foreground space-y-1">
          <p>‚ú® –ó–≥–∞–¥–∞–π—Ç–µ —Ç–µ–º–∏, –∂–∞–Ω—Ä–∏ –∞–±–æ –ø–∞–º'—è—Ç–Ω—ñ —Å—Ü–µ–Ω–∏</p>
          <p>üé≠ –û–ø–∏—à—ñ—Ç—å —Ç–∏–ø–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ –∞–±–æ —Å—Ç–æ—Å—É–Ω–∫–∏</p>
          <p>üåç –í–∫–ª—é—á—ñ—Ç—å –º—ñ—Å—Ü–µ –¥—ñ—ó –∞–±–æ –ø–µ—Ä—ñ–æ–¥ —á–∞—Å—É</p>
        </div>
      </CenteredPlaceholder>
    );
  }

  if (loading) {
    return (
      <div>
        <div className="flex items-center gap-2 mb-4 px-1">
          <Loader2 className="h-4 w-4 animate-spin text-primary" />
          <span className="text-sm text-muted-foreground">–ü–æ—à—É–∫ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∞–Ω—ñ–º–µ...</span>
        </div>
        <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
          {Array.from({ length: 6 }).map((_, i) => (
            <div key={i} className="space-y-2">
              <Skeleton className="aspect-[2/3] w-full rounded-lg" />
              <Skeleton className="h-3 w-3/4 rounded" />
              <Skeleton className="h-4 w-full rounded" />
            </div>
          ))}
        </div>
      </div>
    );
  }

  if (results && results.length === 0) {
    return (
      <CenteredPlaceholder>
        <SearchX className="h-12 w-12 text-muted-foreground/40 mb-4 mx-auto" />
        <h3 className="font-semibold mb-2">–ó–±—ñ–≥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
        <p className="text-sm text-muted-foreground mb-4">
          –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∞–±–æ –±—É–¥—å—Ç–µ —Ç–æ—á–Ω—ñ—à–∏–º–∏ —â–æ–¥–æ —Ç–µ–º —ñ –∂–∞–Ω—Ä—ñ–≤.
        </p>
        <div className="text-xs text-muted-foreground space-y-1">
          <p>üí° –°–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç–∏ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —Å—Ç–∏–ª—å –∞–±–æ —Ö—É–¥–æ–∂–Ω—î –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è</p>
          <p>üé¨ –ó–≥–∞–¥–∞–π—Ç–µ –µ–ª–µ–º–µ–Ω—Ç–∏ —Å—é–∂–µ—Ç—É –∞–±–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ñ—Å—Ç–æ—Ä—ñ—ó</p>
        </div>
      </CenteredPlaceholder>
    );
  }

  if (results && results.length > 0) {
    return (
      <div>
        <div className="flex items-center justify-between mb-4 px-1">
          <div>
            <h4 className="font-semibold text-sm">–ó–Ω–∞–π–¥–µ–Ω–æ {results.length} —Å—Ö–æ–∂–∏—Ö –∞–Ω—ñ–º–µ</h4>
            <p className="text-xs text-muted-foreground">–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –±—É–¥—å-—è–∫—É –∫–∞—Ä—Ç–∫—É, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—ñ</p>
          </div>
          <div className="flex items-center gap-1 text-xs text-muted-foreground">
            <Sparkles className="h-3 w-3" />
            <span>–ó–∞ —Å—Ö–æ–∂—ñ—Å—Ç—é</span>
          </div>
        </div>
        <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
          {results.map((anime) => (
            <DialogClose asChild key={anime.slug}>
              <SimilarAnimeCard anime={anime} />
            </DialogClose>
          ))}
        </div>
      </div>
    );
  }

  return null;
};

const AnimeSearchComponent: React.FC<{ moduleId: string }> = ({ moduleId }) => {
  const [inputText, setInputText] = useState('');
  const { results, loading, error, search, clear } = useAnimeSearch();

  const handleSearchClick = () => {
    if (inputText.trim()) search(inputText);
  };

  const handleClearClick = () => {
    clear();
    setInputText('');
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button
          variant="outline"
          size="icon-md"
        >
          <Icon icon="mingcute:list-search-line" className="h-5 w-5" />
        </Button>
      </DialogTrigger>

      <DialogContent className="sm:max-w-3xl w-full max-h-[90vh] grid grid-rows-[auto_1fr] p-0 gap-0">
        <div className="p-6 pb-4 border-b bg-gradient-to-r from-muted/30 to-background">
          <DialogHeader className="mb-6">
            <div className="flex items-center gap-3 mb-2">
              <div className="p-2 bg-primary/10 rounded-lg">
                <Icon icon="mingcute:list-search-line" className="h-5 w-5 text-primary" />
              </div>
              <div>
                <DialogTitle className="text-xl">–°–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ –∞–Ω—ñ–º–µ</DialogTitle>
                <DialogDescription className="text-sm">
                  –ó–Ω–∞–π–¥—ñ—Ç—å –∞–Ω—ñ–º–µ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –æ–ø–∏—Å—ñ–≤ –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é. –ë—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏.
                </DialogDescription>
              </div>
            </div>
          </DialogHeader>

          <div className="space-y-4">
            <div className="relative">
              <Textarea
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                placeholder="–û–ø–∏—Å –¥–ª—è –ø–æ—à—É–∫—É..."
                className="min-h-24 resize-none pr-16 rounded-lg"
                onKeyDown={(e) => {
                  if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    handleSearchClick();
                  }
                }}
              />
              <div className="absolute bottom-3 right-3 text-xs text-muted-foreground">
                {inputText.length}/500
              </div>
            </div>

            <div className="flex items-center gap-3">
              <Button
                onClick={handleSearchClick}
                disabled={loading || !inputText.trim()}
                variant={"default"}
              >
                {loading ? (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <Search className="mr-2 h-4 w-4" />
                )}
                {loading ? '–ü–æ—à—É–∫...' : '–®—É–∫–∞—Ç–∏'}
              </Button>

              {(results || inputText) && !loading && (
                <Button onClick={handleClearClick} variant="outline">
                  –û—á–∏—Å—Ç–∏—Ç–∏
                </Button>
              )}
            </div>

            {error && (
              <Alert variant="destructive" className="mt-4">
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}
          </div>
        </div>

        <div className="flex-1 overflow-y-auto p-6 max-h-60 min-h-60">
          <SearchResults loading={loading} results={results} />
        </div>

      </DialogContent>
    </Dialog>
  );
};

export default AnimeSearchComponent;